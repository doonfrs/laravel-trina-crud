<?php

namespace Trinavo\TrinaCrud\Services;

use Illuminate\Support\Str;
use Trinavo\TrinaCrud\Models\ModelSchema;

class OpenApiService
{
    /**
     * Generate complete OpenAPI documentation
     * 
     * @param ModelSchema[] $models List of model class names
     * @return array
     */
    public function generateOpenApi(array $models): array
    {
        $openApi = [
            'openapi' => '3.0.0',
            'info' => [
                'title' => config('app.name', 'Laravel') . ' API',
                'description' => 'API documentation automatically generated by TrinaCrud',
                'version' => '1.0.0',
            ],
            'servers' => [
                [
                    'url' => url('/api/' . config('trina-crud.route_prefix', 'trina-crud')),
                    'description' => 'API Server',
                ],
            ],
            'paths' => [],
            'components' => [
                'schemas' => [],
                'securitySchemes' => [
                    'bearerAuth' => [
                        'type' => 'http',
                        'scheme' => 'bearer',
                        'bearerFormat' => 'JWT',
                    ],
                ],
            ],
        ];

        foreach ($models as $model) {
            $fields = $model->getAuthorizedFields();
            $properties = [];

            foreach ($fields as $field) {
                // Determine field type based on common Laravel field naming conventions
                $properties[$field] = $this->getFieldDefinition($field);
            }

            $itemOpenApi = [
                'type' => 'object',
                'properties' => $properties
            ];

            // Add schema to components
            $openApi['components']['schemas'][$model->getModelName()] = $itemOpenApi;

            // Generate paths for this model
            $resourceName = $model->getModelName();
            $resourceName = str_replace('\\', '.', $resourceName);
            $this->addResourcePaths($openApi['paths'], $resourceName, $model->getModelName());
        }

        return $openApi;
    }


    /**
     * Add paths for a resource
     * 
     * @param array &$paths
     * @param string $resourceName
     * @param string $modelName
     * @return void
     */
    private function addResourcePaths(array &$paths, string $resourceName, string $modelName): void
    {
        // Index endpoint
        $paths["/{$resourceName}"] = [
            'get' => [
                'summary' => "List all {$resourceName}",
                'description' => "Returns a list of {$resourceName}",
                'operationId' => "getAll{$modelName}",
                'tags' => [$resourceName],
                'parameters' => [
                    [
                        'name' => 'page',
                        'in' => 'query',
                        'description' => 'Page number',
                        'required' => false,
                        'schema' => ['type' => 'integer', 'default' => 1]
                    ],
                    [
                        'name' => 'per_page',
                        'in' => 'query',
                        'description' => 'Items per page',
                        'required' => false,
                        'schema' => ['type' => 'integer', 'default' => 15]
                    ],
                    [
                        'name' => 'sort',
                        'in' => 'query',
                        'description' => 'Field to sort by (prefix with - for descending)',
                        'required' => false,
                        'schema' => ['type' => 'string']
                    ],
                    [
                        'name' => 'with',
                        'in' => 'query',
                        'description' => 'Related resources to include',
                        'required' => false,
                        'schema' => ['type' => 'string']
                    ],
                ],
                'responses' => [
                    '200' => [
                        'description' => 'Successful operation',
                        'content' => [
                            'application/json' => [
                                'schema' => [
                                    'type' => 'object',
                                    'properties' => [
                                        'data' => [
                                            'type' => 'array',
                                            'items' => [
                                                '$ref' => "#/components/schemas/{$modelName}"
                                            ]
                                        ],
                                        'meta' => [
                                            'type' => 'object',
                                            'properties' => [
                                                'current_page' => ['type' => 'integer'],
                                                'from' => ['type' => 'integer'],
                                                'last_page' => ['type' => 'integer'],
                                                'path' => ['type' => 'string'],
                                                'per_page' => ['type' => 'integer'],
                                                'to' => ['type' => 'integer'],
                                                'total' => ['type' => 'integer'],
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    '401' => ['description' => 'Unauthorized'],
                    '403' => ['description' => 'Forbidden'],
                ],
                'security' => [['bearerAuth' => []]]
            ],
            'post' => [
                'summary' => "Create a new {$modelName}",
                'description' => "Creates a new {$modelName} and returns it",
                'operationId' => "create{$modelName}",
                'tags' => [$resourceName],
                'requestBody' => [
                    'required' => true,
                    'content' => [
                        'application/json' => [
                            'schema' => [
                                '$ref' => "#/components/schemas/{$modelName}"
                            ]
                        ]
                    ]
                ],
                'responses' => [
                    '201' => [
                        'description' => 'Created successfully',
                        'content' => [
                            'application/json' => [
                                'schema' => [
                                    'type' => 'object',
                                    'properties' => [
                                        'data' => [
                                            '$ref' => "#/components/schemas/{$modelName}"
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    '400' => ['description' => 'Bad request'],
                    '401' => ['description' => 'Unauthorized'],
                    '403' => ['description' => 'Forbidden'],
                    '422' => ['description' => 'Validation error'],
                ],
                'security' => [['bearerAuth' => []]]
            ]
        ];

        // Show, Update, Delete endpoints
        $paths["/{$resourceName}/{id}"] = [
            'get' => [
                'summary' => "Get a specific {$modelName}",
                'description' => "Returns a single {$modelName}",
                'operationId' => "get{$modelName}",
                'tags' => [$resourceName],
                'parameters' => [
                    [
                        'name' => 'id',
                        'in' => 'path',
                        'description' => 'ID of the resource',
                        'required' => true,
                        'schema' => ['type' => 'integer']
                    ],
                    [
                        'name' => 'with',
                        'in' => 'query',
                        'description' => 'Related resources to include',
                        'required' => false,
                        'schema' => ['type' => 'string']
                    ],
                ],
                'responses' => [
                    '200' => [
                        'description' => 'Successful operation',
                        'content' => [
                            'application/json' => [
                                'schema' => [
                                    'type' => 'object',
                                    'properties' => [
                                        'data' => [
                                            '$ref' => "#/components/schemas/{$modelName}"
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    '401' => ['description' => 'Unauthorized'],
                    '403' => ['description' => 'Forbidden'],
                    '404' => ['description' => 'Not found'],
                ],
                'security' => [['bearerAuth' => []]]
            ],
            'put' => [
                'summary' => "Update a {$modelName}",
                'description' => "Updates a {$modelName} and returns it",
                'operationId' => "update{$modelName}",
                'tags' => [$resourceName],
                'parameters' => [
                    [
                        'name' => 'id',
                        'in' => 'path',
                        'description' => 'ID of the resource',
                        'required' => true,
                        'schema' => ['type' => 'integer']
                    ]
                ],
                'requestBody' => [
                    'required' => true,
                    'content' => [
                        'application/json' => [
                            'schema' => [
                                '$ref' => "#/components/schemas/{$modelName}"
                            ]
                        ]
                    ]
                ],
                'responses' => [
                    '200' => [
                        'description' => 'Updated successfully',
                        'content' => [
                            'application/json' => [
                                'schema' => [
                                    'type' => 'object',
                                    'properties' => [
                                        'data' => [
                                            '$ref' => "#/components/schemas/{$modelName}"
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    '400' => ['description' => 'Bad request'],
                    '401' => ['description' => 'Unauthorized'],
                    '403' => ['description' => 'Forbidden'],
                    '404' => ['description' => 'Not found'],
                    '422' => ['description' => 'Validation error'],
                ],
                'security' => [['bearerAuth' => []]]
            ],
            'delete' => [
                'summary' => "Delete a {$modelName}",
                'description' => "Deletes a {$modelName}",
                'operationId' => "delete{$modelName}",
                'tags' => [$resourceName],
                'parameters' => [
                    [
                        'name' => 'id',
                        'in' => 'path',
                        'description' => 'ID of the resource',
                        'required' => true,
                        'schema' => ['type' => 'integer']
                    ]
                ],
                'responses' => [
                    '200' => [
                        'description' => 'Deleted successfully',
                        'content' => [
                            'application/json' => [
                                'schema' => [
                                    'type' => 'object',
                                    'properties' => [
                                        'message' => ['type' => 'string']
                                    ]
                                ]
                            ]
                        ]
                    ],
                    '401' => ['description' => 'Unauthorized'],
                    '403' => ['description' => 'Forbidden'],
                    '404' => ['description' => 'Not found'],
                ],
                'security' => [['bearerAuth' => []]]
            ]
        ];

        // Schema endpoint
        $paths["/{$resourceName}/get-schema"] = [
            'get' => [
                'summary' => "Get schema for {$modelName}",
                'description' => "Returns schema information for {$modelName}",
                'operationId' => "getSchema{$modelName}",
                'tags' => [$resourceName],
                'responses' => [
                    '200' => [
                        'description' => 'Successful operation',
                        'content' => [
                            'application/json' => [
                                'schema' => [
                                    'type' => 'object',
                                    'properties' => [
                                        'model' => ['type' => 'string'],
                                        'fields' => [
                                            'type' => 'array',
                                            'items' => ['type' => 'string']
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    '401' => ['description' => 'Unauthorized'],
                    '403' => ['description' => 'Forbidden'],
                ],
                'security' => [['bearerAuth' => []]]
            ]
        ];
    }

    /**
     * Get field definition based on field name
     * 
     * @param string $field
     * @return array
     */
    private function getFieldDefinition(string $field): array
    {
        // Define field patterns and their corresponding OpenAPI types
        $fieldPatterns = [
            // IDs and foreign keys
            '/^id$|_id$/' => [
                'type' => 'integer',
                'format' => 'int64',
                'description' => 'Unique identifier'
            ],

            // Dates
            '/^(created_at|updated_at|deleted_at|.*_date|.*_at)$/' => [
                'type' => 'string',
                'format' => 'date-time',
                'description' => 'Timestamp'
            ],

            // Boolean fields
            '/^(is_|has_|can_|should_)/' => [
                'type' => 'boolean',
                'description' => 'Boolean flag'
            ],

            // Numeric fields
            '/^(count_|amount_|price|cost|quantity|number|num_|total)/' => [
                'type' => 'number',
                'format' => 'double',
                'description' => 'Numeric value'
            ],

            // Email addresses
            '/^email$|_email$/' => [
                'type' => 'string',
                'format' => 'email',
                'description' => 'Email address'
            ],

            // URLs
            '/^url$|_url$|link$|_link$/' => [
                'type' => 'string',
                'format' => 'uri',
                'description' => 'URL'
            ],

            // JSON data
            '/^json_|_json$|data$|settings$|options$|config$|meta$/' => [
                'type' => 'object',
                'additionalProperties' => true,
                'description' => 'JSON data'
            ]
        ];

        // Check field against patterns
        foreach ($fieldPatterns as $pattern => $definition) {
            if (preg_match($pattern, $field)) {
                return $definition;
            }
        }

        // Default to string if no pattern matches
        return [
            'type' => 'string',
            'description' => "The $field field"
        ];
    }
}
